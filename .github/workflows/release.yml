name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

env:
  GO_VERSION: '1.21'
  CGO_ENABLED: 1

jobs:
  test:
    name: Test
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Run tests
        run: go test -v ./...

      - name: Build for testing
        run: go build -o mac2mqtt mac2mqtt.go

  build:
    name: Build for ${{ matrix.os }}-${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            arch: amd64
            target: darwin-amd64
          - os: macos-latest
            arch: arm64
            target: darwin-arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Build binary
        env:
          GOOS: darwin
          GOARCH: ${{ matrix.arch }}
          CGO_ENABLED: 1
        run: |
          go build -ldflags="-s -w" -o mac2mqtt-${{ matrix.target }} mac2mqtt.go
          chmod +x mac2mqtt-${{ matrix.target }}

             - name: Create release archive
         run: |
           tar -czf mac2mqtt-${{ matrix.target }}.tar.gz \
             mac2mqtt-${{ matrix.target }} \
             mac2mqtt.yaml \
             com.hagak.mac2mqtt.plist \
             install.sh \
             status.sh \
             debug.sh \
             README.md \
             INSTALL.md

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: mac2mqtt-${{ matrix.target }}
          path: |
            mac2mqtt-${{ matrix.target }}
            mac2mqtt-${{ matrix.target }}.tar.gz

  release:
    name: Create Release
    needs: [test, build]
    runs-on: macos-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Create release notes
        id: release_notes
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          
          if [ -n "$PREVIOUS_TAG" ]; then
            # Generate changelog from previous tag
            CHANGELOG=$(git log --pretty=format:"- %s" $PREVIOUS_TAG..HEAD)
          else
            # First release
            CHANGELOG=$(git log --pretty=format:"- %s" --reverse)
          fi
          
          # Create release notes
          cat > release_notes.md << EOF
          # Mac2MQTT ${{ steps.version.outputs.version }}
          
          ## What's New
          
          $CHANGELOG
          
          ## Installation
          
          ### Automatic Installation
          
          \`\`\`bash
          curl -L https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/mac2mqtt-install.sh | bash
          \`\`\`
          
          ### Manual Installation
          
          1. Download the appropriate archive for your Mac:
             - **Intel Mac**: \`mac2mqtt-darwin-amd64.tar.gz\`
             - **Apple Silicon Mac**: \`mac2mqtt-darwin-arm64.tar.gz\`
          
          2. Extract and run the installer:
             \`\`\`bash
             tar -xzf mac2mqtt-darwin-*.tar.gz
             cd mac2mqtt-darwin-*
             ./install.sh
             \`\`\`
          
          ## Features
          
          - MQTT integration for macOS
          - Volume and mute control
          - Display brightness control (requires BetterDisplay)
          - Media player information (requires Media Control)
          - System controls (sleep, shutdown, etc.)
          - Battery status monitoring
          - Automatic Home Assistant discovery
          
          ## Requirements
          
          - macOS 10.15 or later
          - MQTT broker (Home Assistant, Mosquitto, etc.)
          - Optional: BetterDisplay for display brightness control
          - Optional: Media Control for media player information
          
          ## Support
          
          For issues and questions, please visit the [GitHub repository](https://github.com/${{ github.repository }}).
          EOF
          
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Mac2MQTT ${{ steps.version.outputs.version }}
          body: ${{ steps.release_notes.outputs.release_notes }}
          draft: false
          prerelease: false
          files: |
            mac2mqtt-darwin-amd64/mac2mqtt-darwin-amd64.tar.gz
            mac2mqtt-darwin-arm64/mac2mqtt-darwin-arm64.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create install script
        run: |
          cat > mac2mqtt-install.sh << 'EOF'
          #!/bin/bash
          
          # Mac2MQTT Auto-Installer
          # This script automatically downloads and installs Mac2MQTT
          
          set -e
          
          # Colors for output
          RED='\033[0;31m'
          GREEN='\033[0;32m'
          YELLOW='\033[1;33m'
          BLUE='\033[0;34m'
          NC='\033[0m'
          
          print_status() {
              echo -e "${BLUE}[INFO]${NC} $1"
          }
          
          print_success() {
              echo -e "${GREEN}[SUCCESS]${NC} $1"
          }
          
          print_error() {
              echo -e "${RED}[ERROR]${NC} $1"
          }
          
          # Get version from GitHub API
          VERSION="${{ steps.version.outputs.version }}"
          REPO="${{ github.repository }}"
          
          # Determine architecture
          ARCH=$(uname -m)
          if [ "$ARCH" = "x86_64" ]; then
              TARGET="darwin-amd64"
          elif [ "$ARCH" = "arm64" ]; then
              TARGET="darwin-arm64"
          else
              print_error "Unsupported architecture: $ARCH"
              exit 1
          fi
          
          print_status "Detected architecture: $ARCH ($TARGET)"
          print_status "Installing Mac2MQTT version: $VERSION"
          
          # Create temporary directory
          TEMP_DIR=$(mktemp -d)
          cd "$TEMP_DIR"
          
          # Download release
          print_status "Downloading Mac2MQTT..."
          curl -L -o "mac2mqtt-$TARGET.tar.gz" \
            "https://github.com/$REPO/releases/download/$VERSION/mac2mqtt-$TARGET.tar.gz"
          
          # Extract
          print_status "Extracting files..."
          tar -xzf "mac2mqtt-$TARGET.tar.gz"
          
          # Run installer
          print_status "Running installer..."
          cd "mac2mqtt-$TARGET"
          chmod +x install.sh
          ./install.sh
          
          # Cleanup
          cd /
          rm -rf "$TEMP_DIR"
          
          print_success "Mac2MQTT installation completed!"
          print_status "You can check the status with: ~/mac2mqtt/status.sh"
          EOF
          
          chmod +x mac2mqtt-install.sh

      - name: Upload install script
        uses: actions/upload-artifact@v3
        with:
          name: install-script
          path: mac2mqtt-install.sh 